LCS Problem Statement: Given two sequences, find the length of longest subsequence present in both of them. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”. So a string of length n has 2^n different possible subsequences.

It is a classic computer science problem, the basis of diff (a file comparison program that outputs the differences between two files), and has applications in bioinformatics.

Examples:
LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.


public class LongestSequence { 

     public static void main(String[] args) {
         
         System.out.println(lcs("ABGHY","ACDBG",5,5));
     
     }

  static  int lcs( String X, String Y, int m, int n )
{
     if (m == 0 || n == 0)
     return 0;
     if (X.charAt(m-1) == Y.charAt(n-1))
     return 1 + lcs(X, Y, m-1, n-1);
   else
     return Math.max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));

}
   
}
